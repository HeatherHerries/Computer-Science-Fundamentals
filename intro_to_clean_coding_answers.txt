1. In your own words, explain what clean code is and why 
it is important.

A: Clean code is writing code that is simple, easy to 
read and understand, and is well-organized. This is important
for personal code maintainace or if your code is being used by
a developement team it can be easily read, maintained, and 
implemented throughout the program with fewer bugs and breaks.

2. Read this article about Toyota and their use of bad code. 
Although you may not yet understand all of the topics 
discussed, think about another commonly used object that 
relies on computers and explain what would happen if the code 
was not created to an acceptable standard.

A: One particular thing that I use all day everyday that pops
into my head immediately is my cell phone. It could be very 
frustrating if the code was not up to an acceptable standard.
What if clients were calling to make appointments and I was
unable to answer my phone do to some buggy code. I could miss
out on lots of business and ultimately money.

3. Would you consider the following to be clean code? Explain 
why or why not. If not, refactor the code.

FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (xâˆ’32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

A: I would not consider this to be clean code. First, there
are comments explaining almost every line of code. The code
should be self-descriptive for the most part. If you have to
comment excesively then you need to make your code cleaner
and more descriptive. Second, the code could use better naming,
which could make the code more descriptive and no need for
comments. Here is an example of how the code could be cleaner...

Function convertTemperature (degrees, scale)
   IF scale = "F" THEN
   SET temperature to (degrees-32) * (5/9)
   PRINT temperature

   ELSE IF scales = "C" THEN
   SET temperature to degrees * 1.8000 + 32.00

   PRINT temperature

   END IF

   END FUNCTION

   4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

A: I would consider this to be clean code. It is descriptive
and easily read and understood without comments.

5. Using pseudocode, refactor the code for the following 
examples using the principles you have learned in this 
checkpoint.

a. The following function prints the subtotal of a customer's 
transaction and receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

Refactor:

FUNCTION getAmount(subtotal, discountRate)
    RETURN subtotal * discountRate + (subtotal * tax)

FUNCTION checkOutCustomer(amountPaid, amount, paymentType)
    PRINT "Your total due is: " + amount
    IF paymentType = 'CASH' THEN
        PRINT "Change due: " + amountPaid - amount
    ELSE IF paymentType = 'CREDIT CARD' THEN
        PRINT "Your credit card has been charged: " + amountPaid
    END IF 
END FUNCTION               

b. The following function checks out a book if there are no 
issues with the guest's account.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

Refactor:

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive AND NOT guest.hasOverdueBooks AND guest.outstandingFees = 0 THEN // Combine the code by using AND
	 APPEND book to guest.books
         SET book.status to "Checked Out"
         PRINT "Your books have been issued."
 ELSE 
	PRINT "Unable to check out book." 
 END IF
END FUNCTION

c. The following class is a code snippet that should support 
the transactions a customer can perform at an ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

Refactor: 

FUNCTION checkStatusAndOffer
	IF customer.hasCheckingAccount AND customer.hasCreditCard THEN
	  print balance 
	ELSE if customer.hasCheckingAccount AND NOT customer.hasCreditCard THEN
	CALL offerCreditCard
	ELSE CALL offerCheckingAccount AND offerCreditCard
 // above i combine the credit card offer, create new account for customer, and the status in one function
FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

Programming Questions

You may do the following problems in any language of your 
choice. Use the clean code principles taught in this section 
while writing the code.

6. Square Given an array of integers, find out whether the 
sum of the integers is a perfect square. If it is a perfect 
square, return the square root, otherwise return the sum.

Example:
[10,1,4,6,1,1,2] returns 5 because the square root of 25 is 5.
[1,1] returns 2 because 2 is not a perfect square.
The square root of 2 is approximately 1.414213562373095.

function square(arr) {
   let sum = 0;

   for (var i = 0; i < arr.length; i++){
	sum += arr[i];
   }

   if (sum > 0 && Math.sqrt(sum) % 1 === 0){
	return Math.sqrt(sum);
   } else {
	return sum;
   }
)
  square([1,2,3,4,5,6,7]);

  7. Duplicate Given an array of integers, find out whether 
  the array contains any duplicate elements. The function 
  should return true if any value appears at least twice in 
  the array, and false if every element is distinct.

  function duplicate(arr) {
      var counts = {};
      arr.forEach(function(n) {
          counts[n] = counts[n] || 0;
          counts [n]++;
      });

      for (var key in counts) {
          if (counts[key] >= 2) {
              return true;
          }
      }
      return false;
  }

  console.log(duplicate([1, 2, 3, 4, 5, 6, 7])); //prints false
  console.log(duplicate([1, 2, 3, 4, 5, 6, 7, 1])); //prints true
  console.log(duplicate([1, 1, 1, 4, 5, 6, 7, 1])); //prints true
              

